name: "Release"

on:
  release:
    types: [published]

jobs:
  binaries:
    name: Release Binaries
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'release'
    strategy:
      matrix:
        include:
          - arch: x86_64
            pkg: plundrio
            suffix: x86_64-linux
          - arch: aarch64
            pkg: plundrio-aarch64
            suffix: aarch64-linux
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: DeterminateSystems/flake-checker-action@main

      - name: Build ${{ matrix.arch }} binary
        run: nix build .#${{ matrix.pkg }}

      - name: Upload ${{ matrix.arch }} binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./result/bin/plundrio
          asset_name: plundrio_${{ github.event.release.tag_name }}.${{ matrix.suffix }}
          asset_content_type: application/octet-stream

  docker:
    name: Build Docker Image (${{ matrix.arch }})
    needs: [binaries]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x86_64
            nix_package: plundrio-docker
            docker_platform: linux/amd64
            docker_arch_suffix: amd64
          - arch: aarch64
            nix_package: plundrio-docker-aarch64
            docker_platform: linux/arm64
            docker_arch_suffix: arm64
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/flake-checker-action@main
        with:
          fail-mode: true

      - name: Build Docker image with Nix
        run: nix build .#${{ matrix.nix_package }}

      - name: Load Docker image
        run: docker load < result

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable=${{ github.ref_type == 'tag' }}

      - name: Log in to GHCR
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Tag and Push Docker Image
        id: tag_push_image
        env:
          ARCH: ${{ matrix.arch }}
        run: |
          IMAGE_ID=$(docker images --filter "dangling=false" --format "{{.ID}}" | head -n 1)
          echo "Loaded Image ID: $IMAGE_ID"

          echo "Generated base tags:"
          echo "${{ steps.meta.outputs.tags }}"

          echo "${{ steps.meta.outputs.tags }}" | while IFS= read -r BASE_TAG; do
            if [ -z "$BASE_TAG" ]; then continue; fi # Skip empty lines if any
            ARCH_TAG="${BASE_TAG}-${ARCH}" # Use env var ARCH here
            echo "Tagging $IMAGE_ID as $ARCH_TAG"
            docker tag "$IMAGE_ID" "$ARCH_TAG"
            echo "Pushing $ARCH_TAG"
            docker push "$ARCH_TAG"
          done

  create_manifest:
    name: Create Multi-Arch Manifests
    needs: [docker]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Docker meta for manifest
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable=true
          # Add OCI annotations (these apply to the manifest list)
          annotations: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ github.ref_name }}

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Manifest and Push
        run: |
          echo "Base tags for manifests:"
          echo "${{ steps.meta.outputs.tags }}"
          echo "Annotations to apply:"
          echo "${{ steps.meta.outputs.annotations }}"

          # Build the annotation arguments using a bash array for safety
          ANNOTATION_ARGS=()
          echo "${{ steps.meta.outputs.annotations }}" | while IFS= read -r ANN; do
            if [ -z "$ANN" ]; then continue; fi # Skip empty lines
            # Add --annotation flag and the annotation itself (with manifest: prefix removed) as separate array elements
            ANNOTATION_ARGS+=(--annotation "${ANN#manifest:}")
          done
          echo "Annotation arguments array count: ${#ANNOTATION_ARGS[@]}"

          # Process unique tags using a while read loop
          echo "${{ steps.meta.outputs.tags }}" | sort -u | while IFS= read -r FINAL_TAG; do
            if [ -z "$FINAL_TAG" ]; then continue; fi # Skip empty lines

            echo "Processing manifest for $FINAL_TAG"
            # Create the manifest list referencing the arch-specific images
            docker manifest create "$FINAL_TAG" \
              "${FINAL_TAG}-amd64" \
              "${FINAL_TAG}-arm64"

            # Annotate the manifest list if annotations exist
            if [ ${#ANNOTATION_ARGS[@]} -gt 0 ]; then
              echo "Annotating $FINAL_TAG"
              # Pass the array elements correctly expanded as arguments
              docker manifest annotate "$FINAL_TAG" "${ANNOTATION_ARGS[@]}"
            fi

            # Push the final manifest list
            echo "Pushing manifest $FINAL_TAG"
            docker manifest push "$FINAL_TAG"
          done
